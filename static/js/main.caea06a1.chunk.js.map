{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.js","components/NewTodo.js","components/Filters.js","App.js","index.js"],"names":["TodoItem","_ref","todo","handleToggle","handleRemove","react_default","a","createElement","className","completed","type","id","concat","checked","onChange","htmlFor","title","onClick","TodoList","todos","handleToggleAll","Fragment","event","length","filter","map","components_TodoItem","key","counter","NewTodo","state","handleSubmit","preventDefault","_this","props","setState","handleChange","target","value","onSubmit","this","placeholder","React","Component","Filters","filterButton","all","active","handleClick","name","Object","defineProperty","setFilter","href","App","currentFilter","allTodos","visibleTodos","setNewTodo","prevState","toConsumableArray","toggleAll","objectSpread","removeTodo","removeCompleted","components_NewTodo","style","display","components_TodoList","components_Filters","ReactDOM","render","src_App","document","getElementById"],"mappings":"kRA+BeA,MA5Bf,SAAAC,GAAwD,IAApCC,EAAoCD,EAApCC,KAAMC,EAA8BF,EAA9BE,aAAcC,EAAgBH,EAAhBG,aACtC,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAWN,EAAKO,UAAY,YAAc,IAC5CJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SACEG,KAAK,WACLF,UAAU,SACVG,GAAE,QAAAC,OAAUV,EAAKS,IACjBE,QAASX,EAAKO,UACdK,SAAU,kBAAMX,EAAaD,EAAKS,OAGpCN,EAAAC,EAAAC,cAAA,SAAOQ,QAAO,QAAAH,OAAUV,EAAKS,KAAOT,EAAKc,OACzCX,EAAAC,EAAAC,cAAA,UACEG,KAAK,SACLF,UAAU,UACVS,QAAS,kBAAMb,EAAaF,EAAKS,UCyB5BO,MAvCf,SAAAjB,GAKG,IAJDkB,EAIClB,EAJDkB,MACAhB,EAGCF,EAHDE,aACAC,EAECH,EAFDG,aACAgB,EACCnB,EADDmB,gBAEA,OACEf,EAAAC,EAAAC,cAAAF,EAAAC,EAAAe,SAAA,KACEhB,EAAAC,EAAAC,cAAA,SACEG,KAAK,WACLC,GAAG,aACHH,UAAU,aACVM,SAAU,SAAAQ,GAAK,OAAIF,EAAgBE,IACnCT,QAASM,EAAMI,SAAWJ,EACvBK,OAAO,SAAAtB,GAAI,OAAuB,IAAnBA,EAAKO,YACpBc,SAELlB,EAAAC,EAAAC,cAAA,SAAOQ,QAAQ,cAAf,wBAEAV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACXW,EAAMM,IAAI,SAAAvB,GAAI,OACbG,EAAAC,EAAAC,cAACmB,EAAD,CACEvB,aAAcA,EACdC,aAAcA,EACdF,KAAMA,EACNyB,IAAKzB,EAAKS,UC3BlBiB,EAAU,EA6CCC,6MA1CbC,MAAQ,CACN5B,KAAM,MAGR6B,aAAe,SAACT,GACdA,EAAMU,iBAEN,IAAMhB,EAAQiB,EAAKH,MAAM5B,KACnBS,EAAKiB,EAEPZ,IACFiB,EAAKC,MAAMH,aAAapB,EAAIK,GAC5BY,GAAW,EACXK,EAAKE,SAAS,CACZjC,KAAM,SAKZkC,aAAe,SAACd,GACdW,EAAKE,SAAS,CAAEjC,KAAMoB,EAAMe,OAAOC,iFAInC,OACEjC,EAAAC,EAAAC,cAAA,QAAMgC,SAAUC,KAAKT,cACnB1B,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLF,UAAU,WACViC,YAAY,yBACZH,MAAOE,KAAKV,MAAM5B,KAClBY,SAAU0B,KAAKJ,eAEjB/B,EAAAC,EAAAC,cAAA,UAAQG,KAAK,mBAlCCgC,IAAMC,kBCmEbC,6MApEbd,MAAQ,CACNe,aAAc,CACZC,KAAK,EACLC,QAAQ,EACRtC,WAAW,MAIfuC,YAAc,SAAC1B,GACb,IAAME,EAASF,EAAMe,OAAOY,KAExBzB,IACFS,EAAKE,SAAS,CACZU,aAAaK,OAAAC,EAAA,EAAAD,CAAA,CACXJ,KAAK,EACLC,QAAQ,EACRtC,WAAW,GACVe,GAAS,KAIdS,EAAKC,MAAMkB,UAAU5B,6EAKvB,OACEnB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACZH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACE8C,KAAK,KACLJ,KAAK,MACLzC,UAAWgC,KAAKV,MAAMe,aAAaC,IAAM,WAAa,GACtD7B,QAASuB,KAAKQ,aAJhB,QAUF3C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACE8C,KAAK,WACLJ,KAAK,SACLzC,UAAWgC,KAAKV,MAAMe,aAAaE,OAAS,WAAa,GACzD9B,QAASuB,KAAKQ,aAJhB,WAUF3C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACE8C,KAAK,cACLJ,KAAK,YACLzC,UAAWgC,KAAKV,MAAMe,aAAapC,UAAY,WAAa,GAC5DQ,QAASuB,KAAKQ,aAJhB,sBApDYN,IAAMC,WCoIbW,6MAhIbxB,MAAQ,CACNyB,cAAe,MACfC,SAAU,GACVC,aAAc,MAShBC,WAAa,SAAC/C,EAAIK,GAChBiB,EAAKE,SAAS,SAAAwB,GAAS,MAAK,CAC1BH,SAAQ,GAAA5C,OAAAsC,OAAAU,EAAA,EAAAV,CAAMS,EAAUH,UAAhB,CAA0B,CAChC7C,KACAK,QACAP,WAAW,OAEX,kBAAMwB,EAAKmB,UAAUnB,EAAKH,MAAMyB,oBAGtCH,UAAY,SAAC5B,GAIX,OAHAS,EAAKE,SAAS,CACZoB,cAAe/B,IAETA,GACN,IAAK,MACHS,EAAKE,SAAS,SAAAwB,GAAS,MAAK,CAC1BF,aAAcE,EAAUH,YAE1B,MACF,IAAK,SACHvB,EAAKE,SAAS,SAAAwB,GAAS,MAAK,CAC1BF,aAAcE,EAAUH,SAAShC,OAAO,SAAAtB,GAAI,OACzCA,EAAKO,eAGV,MACF,IAAK,YACHwB,EAAKE,SAAS,SAAAwB,GAAS,MAAK,CAC1BF,aAAcE,EAAUH,SAAShC,OAAO,SAAAtB,GAAI,OAC1CA,EAAKO,mBASfoD,UAAY,SAACvC,GACCA,EAAMe,OAAOxB,QAQvBoB,EAAKE,SAAS,SAAAwB,GAAS,MAAK,CAC1BH,SAAUG,EAAUH,SAAS/B,IAAI,SAAAvB,GAAI,OAAAgD,OAAAY,EAAA,EAAAZ,CAAA,GAC9BhD,EAD8B,CACxBO,WAAW,QACtB,kBAAMwB,EAAKmB,UAAUnB,EAAKH,MAAMyB,iBARpCtB,EAAKE,SAAS,SAAAwB,GAAS,MAAK,CAC1BH,SAAUG,EAAUH,SAAS/B,IAAI,SAAAvB,GAAI,OAAAgD,OAAAY,EAAA,EAAAZ,CAAA,GAC9BhD,EAD8B,CACxBO,WAAW,QACtB,kBAAMwB,EAAKmB,UAAUnB,EAAKH,MAAMyB,oBASxCpD,aAAe,SAACQ,GACdsB,EAAKE,SAAS,SAAAwB,GAAS,MAAK,CAC1BH,SAAUG,EAAUH,SAAS/B,IAAI,SAAAvB,GAAI,OACnCA,EAAKS,KAAOA,EACRT,EADJgD,OAAAY,EAAA,EAAAZ,CAAA,GAEShD,EAFT,CAEeO,WAAYP,EAAKO,gBAChC,kBAAMwB,EAAKmB,UAAUnB,EAAKH,MAAMyB,oBAGtCQ,WAAa,SAACpD,GACZsB,EAAKE,SAAS,SAAAwB,GAAS,MAAK,CAC1BH,SAAUG,EAAUH,SAAShC,OAAO,SAAAtB,GAAI,OAAIS,IAAOT,EAAKS,OACtD,kBAAMsB,EAAKmB,UAAUnB,EAAKH,MAAMyB,oBAGtCS,gBAAkB,SAACrD,GACjBsB,EAAKE,SAAS,SAAAwB,GAAS,MAAK,CAC1BH,SAAUG,EAAUH,SAAShC,OAAO,SAAAtB,GAAI,OAAKA,EAAKO,cAChD,kBAAMwB,EAAKmB,UAAUnB,EAAKH,MAAMyB,qGA9EpCf,KAAKL,SAAS,SAAAwB,GAAS,MAAK,CAC1BF,aAAaP,OAAAU,EAAA,EAAAV,CAAKS,EAAUH,8CAiF9B,OACEnD,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,mBAEAF,EAAAC,EAAAC,cAAC0D,EAAD,CAASlC,aAAcS,KAAKkB,cAG9BrD,EAAAC,EAAAC,cAAA,WAASC,UAAU,OAAO0D,MAAO,CAAEC,QAAS,UAC1C9D,EAAAC,EAAAC,cAAC6D,EAAD,CACEjD,MAAOqB,KAAKV,MAAM2B,aAClBtD,aAAcqC,KAAKrC,aACnBiB,gBAAiBoB,KAAKqB,UACtBzD,aAAcoC,KAAKuB,cAIvB1D,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAAS0D,MAAO,CAAEC,QAAS,UAC3C9D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACbgC,KAAKV,MAAM0B,SAAShC,OAAO,SAAAtB,GAAI,OAAKA,EAAKO,YAAWc,OACpD,IAFH,cAMAlB,EAAAC,EAAAC,cAAC8D,EAAD,CAASjB,UAAWZ,KAAKY,YAEzB/C,EAAAC,EAAAC,cAAA,UACEG,KAAK,SACLF,UAAU,kBACVS,QAASuB,KAAKwB,iBAHhB,4BApHQtB,IAAMC,WCAxB2B,IAASC,OACPlE,EAAAC,EAAAC,cAACiE,EAAD,MACAC,SAASC,eAAe","file":"static/js/main.caea06a1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoItem({ todo, handleToggle, handleRemove }) {\n  return (\n    <li className={todo.completed ? 'completed' : ''}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={`todo-${todo.id}`}\n          checked={todo.completed}\n          onChange={() => handleToggle(todo.id)}\n        />\n        {/* eslint-disable-next-line */}\n        <label htmlFor={`todo-${todo.id}`}>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => handleRemove(todo.id)}\n        />\n      </div>\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.object.isRequired,\n  handleToggle: PropTypes.func.isRequired,\n  handleRemove: PropTypes.func.isRequired,\n};\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TodoItem from './TodoItem';\n\nfunction TodoList({\n  todos,\n  handleToggle,\n  handleRemove,\n  handleToggleAll,\n}) {\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={event => handleToggleAll(event)}\n        checked={todos.length === todos\n          .filter(todo => todo.completed === true)\n          .length}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <TodoItem\n            handleToggle={handleToggle}\n            handleRemove={handleRemove}\n            todo={todo}\n            key={todo.id}\n          />\n        ))}\n      </ul>\n    </>\n  );\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleToggle: PropTypes.func.isRequired,\n  handleRemove: PropTypes.func.isRequired,\n  handleToggleAll: PropTypes.func.isRequired,\n};\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nlet counter = 1;\n\nclass NewTodo extends React.Component {\n  state = {\n    todo: '',\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const title = this.state.todo;\n    const id = counter;\n\n    if (title) {\n      this.props.handleSubmit(id, title);\n      counter += 1;\n      this.setState({\n        todo: '',\n      });\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({ todo: event.target.value });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={this.state.todo}\n          onChange={this.handleChange}\n        />\n        <button type=\"submit\" />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\nexport default NewTodo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Filters extends React.Component {\n  state = {\n    filterButton: {\n      all: true,\n      active: false,\n      completed: false,\n    },\n  };\n\n  handleClick = (event) => {\n    const filter = event.target.name;\n\n    if (filter) {\n      this.setState({\n        filterButton: {\n          all: false,\n          active: false,\n          completed: false,\n          [filter]: true,\n        },\n      });\n\n      this.props.setFilter(filter);\n    }\n  };\n\n  render() {\n    return (\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            name=\"all\"\n            className={this.state.filterButton.all ? 'selected' : ''}\n            onClick={this.handleClick}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            name=\"active\"\n            className={this.state.filterButton.active ? 'selected' : ''}\n            onClick={this.handleClick}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            name=\"completed\"\n            className={this.state.filterButton.completed ? 'selected' : ''}\n            onClick={this.handleClick}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n    );\n  }\n}\n\nFilters.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n};\nexport default Filters;\n","import React from 'react';\n\nimport TodoList from './components/TodoList';\nimport NewTodo from './components/NewTodo';\nimport Filters from './components/Filters';\n\nclass App extends React.Component {\n  state = {\n    currentFilter: 'all',\n    allTodos: [],\n    visibleTodos: [],\n  }\n\n  componentDidMount() {\n    this.setState(prevState => ({\n      visibleTodos: [...prevState.allTodos],\n    }));\n  }\n\n  setNewTodo = (id, title) => {\n    this.setState(prevState => ({\n      allTodos: [...prevState.allTodos, {\n        id,\n        title,\n        completed: false,\n      }],\n    }), () => this.setFilter(this.state.currentFilter));\n  }\n\n  setFilter = (filter) => {\n    this.setState({\n      currentFilter: filter,\n    });\n    switch (filter) {\n      case 'all':\n        this.setState(prevState => ({\n          visibleTodos: prevState.allTodos,\n        }));\n        break;\n      case 'active':\n        this.setState(prevState => ({\n          visibleTodos: prevState.allTodos.filter(todo => (\n            !todo.completed\n          )),\n        }));\n        break;\n      case 'completed':\n        this.setState(prevState => ({\n          visibleTodos: prevState.allTodos.filter(todo => (\n            todo.completed\n          )),\n        }));\n        break;\n      default:\n        break;\n    }\n  }\n\n  toggleAll = (event) => {\n    const val = event.target.checked;\n\n    if (!val) {\n      this.setState(prevState => ({\n        allTodos: prevState.allTodos.map(todo => (\n          { ...todo, completed: false })),\n      }), () => this.setFilter(this.state.currentFilter));\n    } else {\n      this.setState(prevState => ({\n        allTodos: prevState.allTodos.map(todo => (\n          { ...todo, completed: true })),\n      }), () => this.setFilter(this.state.currentFilter));\n    }\n  }\n\n  handleToggle = (id) => {\n    this.setState(prevState => ({\n      allTodos: prevState.allTodos.map(todo => (\n        todo.id !== id\n          ? todo\n          : { ...todo, completed: !todo.completed })),\n    }), () => this.setFilter(this.state.currentFilter));\n  }\n\n  removeTodo = (id) => {\n    this.setState(prevState => ({\n      allTodos: prevState.allTodos.filter(todo => id !== todo.id),\n    }), () => this.setFilter(this.state.currentFilter));\n  }\n\n  removeCompleted = (id) => {\n    this.setState(prevState => ({\n      allTodos: prevState.allTodos.filter(todo => !todo.completed),\n    }), () => this.setFilter(this.state.currentFilter));\n  }\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <NewTodo handleSubmit={this.setNewTodo} />\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          <TodoList\n            todos={this.state.visibleTodos}\n            handleToggle={this.handleToggle}\n            handleToggleAll={this.toggleAll}\n            handleRemove={this.removeTodo}\n          />\n        </section>\n\n        <footer className=\"footer\" style={{ display: 'block' }}>\n          <span className=\"todo-count\">\n            {this.state.allTodos.filter(todo => !todo.completed).length}\n            {' '}\n            items left\n          </span>\n\n          <Filters setFilter={this.setFilter} />\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.removeCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}