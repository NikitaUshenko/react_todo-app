{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.js","components/NewTodo.js","components/Filters.js","App.js","index.js"],"names":["TodoItem","state","id","_this","props","todo","editable","newTitle","title","changeItem","setState","handleBlur","event","target","value","handleSubmit","handleChange","preventDefault","_this2","this","react_default","a","createElement","className","completed","onSubmit","type","onBlur","onChange","autoFocus","onDoubleClick","checked","handleToggle","onClick","handleRemove","React","Component","TodoList","_ref","todos","handleToggleAll","Fragment","every","htmlFor","map","components_TodoItem","key","counter","NewTodo","placeholder","Filters","filterButton","all","active","handleClick","filter","name","Object","defineProperty","setFilter","href","App","currentFilter","allTodos","visibleTodos","setNewTodo","prevState","concat","toConsumableArray","toggleAll","val","objectSpread","removeTodo","removeCompleted","updateExciting","components_NewTodo","style","display","components_TodoList","length","components_Filters","ReactDOM","render","src_App","document","getElementById"],"mappings":"kRAsFeA,6MAlFbC,MAAQ,CACNC,GAAIC,EAAKC,MAAMC,KAAKH,GACpBI,UAAU,EACVC,SAAUJ,EAAKC,MAAMC,KAAKG,SAG5BC,WAAa,WACXN,EAAKO,SAAS,CACZJ,UAAU,OAIdK,WAAa,SAACC,GACZT,EAAKO,SAAS,CACZJ,UAAU,EACVC,SAAUK,EAAMC,OAAOC,OACtB,kBAAMX,EAAKC,MAAMW,aAAaZ,EAAKC,MAAMC,KAAKH,GAAIC,EAAKF,MAAMM,eAGlES,aAAe,SAACJ,GACdT,EAAKO,SAAS,CAAEH,SAAUK,EAAMC,OAAOC,WAGzCC,aAAe,SAACH,GACdA,EAAMK,iBAENd,EAAKO,SAAS,CACZJ,UAAU,GACT,kBAAMH,EAAKC,MAAMW,aAAaZ,EAAKF,MAAMC,GAAIC,EAAKF,MAAMM,qFAGpD,IAAAW,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAWJ,KAAKf,MAAMC,KAAKmB,UAAY,YAAc,IAErDL,KAAKlB,MAAMK,UACTc,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaE,SAAUN,KAAKJ,cAC1CK,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLZ,MAAOK,KAAKlB,MAAMM,SAClBgB,UAAU,OACVI,OAAQR,KAAKR,WACbiB,SAAUT,KAAKH,aACfa,WAAS,KAKjBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOO,cAAe,SAAAlB,GAAK,OAAIM,EAAKT,WAAWG,KAC5DQ,EAAAC,EAAAC,cAAA,SACEI,KAAK,WACLH,UAAU,iBACVrB,GAAIiB,KAAKf,MAAMC,KAAKH,GACpB6B,QAASZ,KAAKf,MAAMC,KAAKmB,UACzBI,SAAU,kBAAMV,EAAKd,MAAM4B,aAAad,EAAKd,MAAMC,KAAKH,OAI1DkB,EAAAC,EAAAC,cAAA,aACGH,KAAKf,MAAMC,KAAKG,OAEnBY,EAAAC,EAAAC,cAAA,UACEI,KAAK,SACLH,UAAU,UACVU,QAAS,kBAAMf,EAAKd,MAAM8B,aAAahB,EAAKd,MAAMC,KAAKH,gBAjE5CiC,IAAMC,WC4CdC,MA1Cf,SAAAC,GAMG,IALDC,EAKCD,EALDC,MACAP,EAICM,EAJDN,aACAE,EAGCI,EAHDJ,aACAM,EAECF,EAFDE,gBACAzB,EACCuB,EADDvB,aAEA,OACEK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoB,SAAA,KACErB,EAAAC,EAAAC,cAAA,SACEI,KAAK,WACLxB,GAAG,aACHqB,UAAU,aACVK,SAAU,SAAAhB,GAAK,OAAI4B,EAAgB5B,IACnCmB,QAASQ,EAAMG,MAAM,SAAArC,GAAI,OAAIA,EAAKmB,cAIpCJ,EAAAC,EAAAC,cAAA,SAAOqB,QAAQ,cAAf,wBAEAvB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACXgB,EAAMK,IAAI,SAAAvC,GAAI,OACbe,EAAAC,EAAAC,cAACuB,EAAD,CACEb,aAAcA,EACdE,aAAcA,EACdnB,aAAcA,EACdV,KAAMA,EACNyC,IAAKzC,EAAKH,UC7BlB6C,EAAU,EA6CCC,6MA1Cb/C,MAAQ,CACNI,KAAM,MAGRU,aAAe,SAACH,GACdA,EAAMK,iBAEN,IAAMT,EAAQL,EAAKF,MAAMI,KACnBH,EAAK6C,EAEPvC,IACFL,EAAKC,MAAMW,aAAab,EAAIM,GAC5BuC,GAAW,EACX5C,EAAKO,SAAS,CACZL,KAAM,SAKZW,aAAe,SAACJ,GACdT,EAAKO,SAAS,CAAEL,KAAMO,EAAMC,OAAOC,iFAInC,OACEM,EAAAC,EAAAC,cAAA,QAAMG,SAAUN,KAAKJ,cACnBK,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLH,UAAU,WACV0B,YAAY,yBACZnC,MAAOK,KAAKlB,MAAMI,KAClBuB,SAAUT,KAAKH,eAEjBI,EAAAC,EAAAC,cAAA,UAAQI,KAAK,mBAlCCS,IAAMC,kBCmEbc,6MApEbjD,MAAQ,CACNkD,aAAc,CACZC,KAAK,EACLC,QAAQ,EACR7B,WAAW,MAIf8B,YAAc,SAAC1C,GACb,IAAM2C,EAAS3C,EAAMC,OAAO2C,KAExBD,IACFpD,EAAKO,SAAS,CACZyC,aAAaM,OAAAC,EAAA,EAAAD,CAAA,CACXL,KAAK,EACLC,QAAQ,EACR7B,WAAW,GACV+B,GAAS,KAIdpD,EAAKC,MAAMuD,UAAUJ,6EAKvB,OACEnC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACZH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEsC,KAAK,KACLJ,KAAK,MACLjC,UAAWJ,KAAKlB,MAAMkD,aAAaC,IAAM,WAAa,GACtDnB,QAASd,KAAKmC,aAJhB,QAUFlC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEsC,KAAK,WACLJ,KAAK,SACLjC,UAAWJ,KAAKlB,MAAMkD,aAAaE,OAAS,WAAa,GACzDpB,QAASd,KAAKmC,aAJhB,WAUFlC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEsC,KAAK,cACLJ,KAAK,YACLjC,UAAWJ,KAAKlB,MAAMkD,aAAa3B,UAAY,WAAa,GAC5DS,QAASd,KAAKmC,aAJhB,sBApDYnB,IAAMC,WCyJbyB,6MArJb5D,MAAQ,CACN6D,cAAe,MACfC,SAAU,GACVC,aAAc,MAShBC,WAAa,SAAC/D,EAAIM,GAAU,IAClBsD,EAAkB3D,EAAKF,MAAvB6D,cAER3D,EAAKO,SAAS,SAAAwD,GAAS,MAAK,CAC1BH,SAAQ,GAAAI,OAAAV,OAAAW,EAAA,EAAAX,CAAMS,EAAUH,UAAhB,CAA0B,CAChC7D,KACAM,QACAgB,WAAW,OAEX,kBAAMrB,EAAKwD,UAAUG,QAG3BH,UAAY,SAACJ,GAIX,OAHApD,EAAKO,SAAS,CACZoD,cAAeP,IAETA,GACN,IAAK,MACHpD,EAAKO,SAAS,SAAAwD,GAAS,MAAK,CAC1BF,aAAcE,EAAUH,YAE1B,MACF,IAAK,SACH5D,EAAKO,SAAS,SAAAwD,GAAS,MAAK,CAC1BF,aAAcE,EAAUH,SAASR,OAAO,SAAAlD,GAAI,OACzCA,EAAKmB,eAGV,MACF,IAAK,YACHrB,EAAKO,SAAS,SAAAwD,GAAS,MAAK,CAC1BF,aAAcE,EAAUH,SAASR,OAAO,SAAAlD,GAAI,OAC1CA,EAAKmB,mBASf6C,UAAY,SAACzD,GACX,IAAM0D,EAAM1D,EAAMC,OAAOkB,QACjB+B,EAAkB3D,EAAKF,MAAvB6D,cAEHQ,EAMHnE,EAAKO,SAAS,SAAAwD,GAAS,MAAK,CAC1BH,SAAUG,EAAUH,SAASnB,IAAI,SAAAvC,GAAI,OAAAoD,OAAAc,EAAA,EAAAd,CAAA,GAC9BpD,EAD8B,CACxBmB,WAAW,QACtB,kBAAMrB,EAAKwD,UAAUG,KARzB3D,EAAKO,SAAS,SAAAwD,GAAS,MAAK,CAC1BH,SAAUG,EAAUH,SAASnB,IAAI,SAAAvC,GAAI,OAAAoD,OAAAc,EAAA,EAAAd,CAAA,GAC9BpD,EAD8B,CACxBmB,WAAW,QACtB,kBAAMrB,EAAKwD,UAAUG,QAS7B9B,aAAe,SAAC9B,GAAO,IACb4D,EAAkB3D,EAAKF,MAAvB6D,cAER3D,EAAKO,SAAS,SAAAwD,GAAS,MAAK,CAC1BH,SAAUG,EAAUH,SAASnB,IAAI,SAAAvC,GAAI,OACnCA,EAAKH,KAAOA,EACRG,EADJoD,OAAAc,EAAA,EAAAd,CAAA,GAESpD,EAFT,CAEemB,WAAYnB,EAAKmB,gBAChC,kBAAMrB,EAAKwD,UAAUG,QAG3BU,WAAa,SAACtE,GAAO,IACX4D,EAAkB3D,EAAKF,MAAvB6D,cAER3D,EAAKO,SAAS,SAAAwD,GAAS,MAAK,CAC1BH,SAAUG,EAAUH,SAASR,OAAO,SAAAlD,GAAI,OAAIH,IAAOG,EAAKH,OACtD,kBAAMC,EAAKwD,UAAUG,QAG3BW,gBAAkB,WAAM,IACdX,EAAkB3D,EAAKF,MAAvB6D,cAER3D,EAAKO,SAAS,SAAAwD,GAAS,MAAK,CAC1BH,SAAUG,EAAUH,SAASR,OAAO,SAAAlD,GAAI,OAAKA,EAAKmB,cAChD,kBAAMrB,EAAKwD,UAAUG,QAG3BY,eAAiB,SAACxE,EAAIM,GAAU,IACtBsD,EAAkB3D,EAAKF,MAAvB6D,cAER3D,EAAKO,SAAS,SAAAwD,GAAS,MAAK,CAC1BH,SAAUG,EAAUH,SAASnB,IAAI,SAAAvC,GAAI,OACnCA,EAAKH,KAAOA,EACRG,EADJoD,OAAAc,EAAA,EAAAd,CAAA,GAESpD,EAFT,CAEeG,cACf,kBAAML,EAAKwD,UAAUG,yFAlGzB3C,KAAKT,SAAS,SAAAwD,GAAS,MAAK,CAC1BF,aAAaP,OAAAW,EAAA,EAAAX,CAAKS,EAAUH,8CAqG9B,OACE3C,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,mBAEAF,EAAAC,EAAAC,cAACqD,EAAD,CAAS5D,aAAcI,KAAK8C,cAG9B7C,EAAAC,EAAAC,cAAA,WAASC,UAAU,OAAOqD,MAAO,CAAEC,QAAS,UAC1CzD,EAAAC,EAAAC,cAACwD,EAAD,CACEvC,MAAOpB,KAAKlB,MAAM+D,aAClBhC,aAAcb,KAAKa,aACnBQ,gBAAiBrB,KAAKkD,UACtBnC,aAAcf,KAAKqD,WACnBzD,aAAcI,KAAKuD,kBAIvBtD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASqD,MAAO,CAAEC,QAAS,UAC3CzD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACbJ,KAAKlB,MAAM8D,SAASR,OAAO,SAAAlD,GAAI,OAAKA,EAAKmB,YAAWuD,OACpD,IAFH,cAMA3D,EAAAC,EAAAC,cAAC0D,EAAD,CAASrB,UAAWxC,KAAKwC,YAEzBvC,EAAAC,EAAAC,cAAA,UACEI,KAAK,SACLH,UAAU,kBACVU,QAASd,KAAKsD,iBAHhB,4BAzIQtC,IAAMC,WCAxB6C,IAASC,OACP9D,EAAAC,EAAAC,cAAC6D,EAAD,MACAC,SAASC,eAAe","file":"static/js/main.2202a303.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.Component {\n  state = {\n    id: this.props.todo.id,\n    editable: false,\n    newTitle: this.props.todo.title,\n  }\n\n  changeItem = () => {\n    this.setState({\n      editable: true,\n    });\n  }\n\n  handleBlur = (event) => {\n    this.setState({\n      editable: false,\n      newTitle: event.target.value,\n    }, () => this.props.handleSubmit(this.props.todo.id, this.state.newTitle));\n  }\n\n  handleChange = (event) => {\n    this.setState({ newTitle: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.setState({\n      editable: false,\n    }, () => this.props.handleSubmit(this.state.id, this.state.newTitle));\n  }\n\n  render() {\n    return (\n      <li className={this.props.todo.completed ? 'completed' : ''}>\n        {\n          this.state.editable && (\n            <form className=\"edit-table\" onSubmit={this.handleSubmit}>\n              <input\n                type=\"text\"\n                value={this.state.newTitle}\n                className=\"edit\"\n                onBlur={this.handleBlur}\n                onChange={this.handleChange}\n                autoFocus\n              />\n            </form>\n          )\n        }\n        <div className=\"view\" onDoubleClick={event => this.changeItem(event)}>\n          <input\n            type=\"checkbox\"\n            className=\"toggle editing\"\n            id={this.props.todo.id}\n            checked={this.props.todo.completed}\n            onChange={() => this.props.handleToggle(this.props.todo.id)}\n          />\n          {/* eslint-disable-next-line max-len */}\n          {/* eslint-disable-next-line jsx-a11y/label-has-for,jsx-a11y/label-has-associated-control */}\n          <label>\n            {this.props.todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => this.props.handleRemove(this.props.todo.id)}\n          />\n        </div>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  handleToggle: PropTypes.func.isRequired,\n  handleRemove: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n};\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TodoItem from './TodoItem';\n\nfunction TodoList({\n  todos,\n  handleToggle,\n  handleRemove,\n  handleToggleAll,\n  handleSubmit,\n}) {\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={event => handleToggleAll(event)}\n        checked={todos.every(todo => todo.completed)}\n      />\n      {/* eslint-disable-next-line max-len */}\n      {/* eslint-disable-next-line jsx-a11y/label-has-associated-control,jsx-a11y/label-has-for */}\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <TodoItem\n            handleToggle={handleToggle}\n            handleRemove={handleRemove}\n            handleSubmit={handleSubmit}\n            todo={todo}\n            key={todo.id}\n          />\n        ))}\n      </ul>\n    </>\n  );\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleToggle: PropTypes.func.isRequired,\n  handleRemove: PropTypes.func.isRequired,\n  handleToggleAll: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n};\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nlet counter = 1;\n\nclass NewTodo extends React.Component {\n  state = {\n    todo: '',\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const title = this.state.todo;\n    const id = counter;\n\n    if (title) {\n      this.props.handleSubmit(id, title);\n      counter += 1;\n      this.setState({\n        todo: '',\n      });\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({ todo: event.target.value });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={this.state.todo}\n          onChange={this.handleChange}\n        />\n        <button type=\"submit\" />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\nexport default NewTodo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Filters extends React.Component {\n  state = {\n    filterButton: {\n      all: true,\n      active: false,\n      completed: false,\n    },\n  };\n\n  handleClick = (event) => {\n    const filter = event.target.name;\n\n    if (filter) {\n      this.setState({\n        filterButton: {\n          all: false,\n          active: false,\n          completed: false,\n          [filter]: true,\n        },\n      });\n\n      this.props.setFilter(filter);\n    }\n  };\n\n  render() {\n    return (\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            name=\"all\"\n            className={this.state.filterButton.all ? 'selected' : ''}\n            onClick={this.handleClick}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            name=\"active\"\n            className={this.state.filterButton.active ? 'selected' : ''}\n            onClick={this.handleClick}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            name=\"completed\"\n            className={this.state.filterButton.completed ? 'selected' : ''}\n            onClick={this.handleClick}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n    );\n  }\n}\n\nFilters.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n};\nexport default Filters;\n","import React from 'react';\n\nimport TodoList from './components/TodoList';\nimport NewTodo from './components/NewTodo';\nimport Filters from './components/Filters';\n\nclass App extends React.Component {\n  state = {\n    currentFilter: 'all',\n    allTodos: [],\n    visibleTodos: [],\n  }\n\n  componentDidMount() {\n    this.setState(prevState => ({\n      visibleTodos: [...prevState.allTodos],\n    }));\n  }\n\n  setNewTodo = (id, title) => {\n    const { currentFilter } = this.state;\n\n    this.setState(prevState => ({\n      allTodos: [...prevState.allTodos, {\n        id,\n        title,\n        completed: false,\n      }],\n    }), () => this.setFilter(currentFilter));\n  }\n\n  setFilter = (filter) => {\n    this.setState({\n      currentFilter: filter,\n    });\n    switch (filter) {\n      case 'all':\n        this.setState(prevState => ({\n          visibleTodos: prevState.allTodos,\n        }));\n        break;\n      case 'active':\n        this.setState(prevState => ({\n          visibleTodos: prevState.allTodos.filter(todo => (\n            !todo.completed\n          )),\n        }));\n        break;\n      case 'completed':\n        this.setState(prevState => ({\n          visibleTodos: prevState.allTodos.filter(todo => (\n            todo.completed\n          )),\n        }));\n        break;\n      default:\n        break;\n    }\n  }\n\n  toggleAll = (event) => {\n    const val = event.target.checked;\n    const { currentFilter } = this.state;\n\n    if (!val) {\n      this.setState(prevState => ({\n        allTodos: prevState.allTodos.map(todo => (\n          { ...todo, completed: false })),\n      }), () => this.setFilter(currentFilter));\n    } else {\n      this.setState(prevState => ({\n        allTodos: prevState.allTodos.map(todo => (\n          { ...todo, completed: true })),\n      }), () => this.setFilter(currentFilter));\n    }\n  }\n\n  handleToggle = (id) => {\n    const { currentFilter } = this.state;\n\n    this.setState(prevState => ({\n      allTodos: prevState.allTodos.map(todo => (\n        todo.id !== id\n          ? todo\n          : { ...todo, completed: !todo.completed })),\n    }), () => this.setFilter(currentFilter));\n  }\n\n  removeTodo = (id) => {\n    const { currentFilter } = this.state;\n\n    this.setState(prevState => ({\n      allTodos: prevState.allTodos.filter(todo => id !== todo.id),\n    }), () => this.setFilter(currentFilter));\n  }\n\n  removeCompleted = () => {\n    const { currentFilter } = this.state;\n\n    this.setState(prevState => ({\n      allTodos: prevState.allTodos.filter(todo => !todo.completed),\n    }), () => this.setFilter(currentFilter));\n  }\n\n  updateExciting = (id, title) => {\n    const { currentFilter } = this.state;\n\n    this.setState(prevState => ({\n      allTodos: prevState.allTodos.map(todo => (\n        todo.id !== id\n          ? todo\n          : { ...todo, title })),\n    }), () => this.setFilter(currentFilter));\n  }\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <NewTodo handleSubmit={this.setNewTodo} />\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          <TodoList\n            todos={this.state.visibleTodos}\n            handleToggle={this.handleToggle}\n            handleToggleAll={this.toggleAll}\n            handleRemove={this.removeTodo}\n            handleSubmit={this.updateExciting}\n          />\n        </section>\n\n        <footer className=\"footer\" style={{ display: 'block' }}>\n          <span className=\"todo-count\">\n            {this.state.allTodos.filter(todo => !todo.completed).length}\n            {' '}\n            items left\n          </span>\n\n          <Filters setFilter={this.setFilter} />\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.removeCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}